"""Update models

Revision ID: 476bd3ca1d51
Revises: 34fc5cc6fd14
Create Date: 2025-06-01 14:26:42.247942

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "476bd3ca1d51"
down_revision: Union[str, None] = "34fc5cc6fd14"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables with foreign key dependencies first
    op.drop_table("events")  # events depends on sessions, so drop it first
    op.drop_table("my_bots")  # my_bots depends on my_agents, so drop it first

    # Then drop the tables that were being referenced
    op.drop_table("sessions")
    op.drop_table("my_agents")

    # Drop remaining tables
    op.drop_table("user_states")
    op.drop_table("app_states")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "events",
        sa.Column("id", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
        sa.Column(
            "app_name", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "user_id", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "session_id", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "invocation_id", sa.VARCHAR(length=256), autoincrement=False, nullable=False
        ),
        sa.Column(
            "author", sa.VARCHAR(length=256), autoincrement=False, nullable=False
        ),
        sa.Column("branch", sa.VARCHAR(length=256), autoincrement=False, nullable=True),
        sa.Column(
            "timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "content",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("actions", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column(
            "long_running_tool_ids_json", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "grounding_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("partial", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("turn_complete", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "error_code", sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
        sa.Column(
            "error_message", sa.VARCHAR(length=1024), autoincrement=False, nullable=True
        ),
        sa.Column("interrupted", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["app_name", "user_id", "session_id"],
            ["sessions.app_name", "sessions.user_id", "sessions.id"],
            name=op.f("events_app_name_user_id_session_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", "app_name", "user_id", "session_id", name=op.f("events_pkey")
        ),
    )
    op.create_table(
        "my_bots",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("token", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("error_message", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "command_prefix", sa.VARCHAR(length=10), autoincrement=False, nullable=True
        ),
        sa.Column(
            "dm_whitelist",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "srv_whitelist",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "use_function_map",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("agent_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["agent_id"], ["my_agents.id"], name=op.f("my_bots_agent_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("my_bots_pkey")),
        sa.UniqueConstraint(
            "token",
            name=op.f("my_bots_token_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "app_states",
        sa.Column(
            "app_name", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "state",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "update_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("app_name", name=op.f("app_states_pkey")),
    )
    op.create_table(
        "my_agents",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("role_instructions", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("tool_instructions", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "agent_model", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "tools",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("my_agents_pkey")),
    )
    op.create_table(
        "sessions",
        sa.Column(
            "app_name", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "user_id", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column("id", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
        sa.Column(
            "state",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "create_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "update_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint(
            "app_name", "user_id", "id", name=op.f("sessions_pkey")
        ),
    )
    op.create_table(
        "user_states",
        sa.Column(
            "app_name", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "user_id", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "state",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "update_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("app_name", "user_id", name=op.f("user_states_pkey")),
    )
    # ### end Alembic commands ###
